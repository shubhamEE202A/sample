From 888e42668e2c5068c37b43a552e8c78d67e67e4b Mon Sep 17 00:00:00 2001
From: Adam YH Lee <adam.yh.lee@gmail.com>
Date: Mon, 8 Dec 2014 13:11:02 -0800
Subject: [PATCH 04/15] Add driver for Newhaven FT5X0X multitouch controller

Tested with Device Tree enabled Linux Kernel 3.17.4
on Gumstix Arbor43C using an Overo AirStorm. Backward
compatibility with the Kernel 3.5 has not been done.

FT5x0x Touchscreen Driver Updated

The original driver written for the Kernel version 3.5 is outdated
on 3.17 in regards to these two respects.

The original code:

1. uses Linux kernel API that need to be updated. For example,
'input_mt_init_slots' take extra parameter. Also 'devm_gpio_request_one'
is considered more modern over 'gpio_request_one'.

2. has incomplete Device Tree support. Device is not registered in
the open firmware table (of_match_table).

Also some refactoring is done. Macro 'module_i2c_driver' is used
to write init and exit functions.

The driver has been tested with mtview, evtest on both device tree
and platform data (by using pdata_quirks) driven Kernel 3.17.

It assumes that there is no reset pin associated to a GPIO. This
may not be true on other implementations of FT5x0x.

Much of these changes are based on the edt-ft5x06 driver. However,
the EDT specific driver is not compatible with this at firmware level.

Additional work to be done from here on includes the followings:

1. Although not observed, I am not sure all resources are freed when
at rmmod. When/how do we use free_irq, gpio_free, input_free_device
or kfree calls?

2. PM (suspend / resume) is not tested.

Signed-off-by: Ash Charles <ashcharles@gmail.com>
---
 arch/arm/mach-omap2/pdata-quirks.c    |  41 ++++
 drivers/input/touchscreen/Kconfig     |   9 +
 drivers/input/touchscreen/Makefile    |   1 +
 drivers/input/touchscreen/ft5x06_ts.c | 376 ++++++++++++++++++++++++++++++++++
 include/linux/input/ft5x06_ts.h       |  25 +++
 5 files changed, 452 insertions(+)
 create mode 100644 drivers/input/touchscreen/ft5x06_ts.c
 create mode 100644 include/linux/input/ft5x06_ts.h

diff --git a/arch/arm/mach-omap2/pdata-quirks.c b/arch/arm/mach-omap2/pdata-quirks.c
index 90c88d4..ac5ad74 100644
--- a/arch/arm/mach-omap2/pdata-quirks.c
+++ b/arch/arm/mach-omap2/pdata-quirks.c
@@ -7,6 +7,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
 #include <linux/clk.h>
 #include <linux/davinci_emac.h>
 #include <linux/gpio.h>
@@ -14,6 +15,7 @@
 #include <linux/kernel.h>
 #include <linux/of_platform.h>
 #include <linux/wl12xx.h>
+#include <linux/input/ft5x06_ts.h>
 
 #include <linux/platform_data/pinctrl-single.h>
 #include <linux/platform_data/iommu-omap.h>
@@ -63,6 +65,39 @@ static inline void legacy_init_wl12xx(unsigned ref_clock,
 }
 #endif
 
+#if IS_ENABLED(CONFIG_TOUCHSCREEN_NEWHAVEN_FT5X0X)
+/* Capacitive Touchscreen */
+static struct ft5x0x_platform_data overo_captouch_info = {
+	.irq_gpio       = 10,
+	.wake_gpio      = 31,
+};
+
+static struct i2c_board_info overo_i2c2_boardinfo[] = {
+	{
+		I2C_BOARD_INFO("ft5x0x_ts", 0x38),
+		.platform_data  = &overo_captouch_info,
+	},
+};
+
+static void __init __used legacy_init_ft5x0x(unsigned int irq_gpio,
+					     unsigned int wake_gpio)
+{
+	int ret;
+
+	overo_i2c2_boardinfo[0].irq = gpio_to_irq(10);
+	ret = omap_register_i2c_bus(3, 100, overo_i2c2_boardinfo,
+				    ARRAY_SIZE(overo_i2c2_boardinfo));
+
+	pr_info("FT5X0X configured\n");
+}
+#else
+static void __init __used legacy_init_ft5x0x(unsigned int irq_gpio,
+					     unsigned int wake_gpio)
+{
+	pr_err("FT5X0X not configured\n");
+}
+#endif
+
 #ifdef CONFIG_MACH_NOKIA_N8X0
 static void __init omap2420_n8x0_legacy_init(void)
 {
@@ -73,6 +108,11 @@ static void __init omap2420_n8x0_legacy_init(void)
 #endif
 
 #ifdef CONFIG_ARCH_OMAP3
+static void __init gumstix_arbor43c_legacy_init(void)
+{
+	legacy_init_ft5x0x(10, 31);
+}
+
 static void __init hsmmc2_internal_input_clk(void)
 {
 	u32 reg;
@@ -377,6 +417,7 @@ static struct pdata_init pdata_quirks[] __initdata = {
 	{ "ti,omap3-evm-37xx", omap3_evm_legacy_init, },
 	{ "ti,omap3-zoom3", omap3_zoom_legacy_init, },
 	{ "ti,am3517-evm", am3517_evm_legacy_init, },
+	{ "gumstix,omap3-overo-arbor43c", gumstix_arbor43c_legacy_init, },
 #endif
 #ifdef CONFIG_ARCH_OMAP4
 	{ "ti,omap4-sdp", omap4_sdp_legacy_init, },
diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 6bb9a7d..f96db89 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -239,6 +239,15 @@ config TOUCHSCREEN_DYNAPRO
 	  To compile this driver as a module, choose M here: the
 	  module will be called dynapro.
 
+config TOUCHSCREEN_NEWHAVEN_FT5X0X
+	tristate "Newhaven FT5x0x I2C Touchscreen support"
+	depends on I2C
+	help
+	   Say Y here if you have a Newhaven Capacitive touchscreen using
+	    a FT5x0x touch controllers. Note: not compatible with EDT
+	    "Polytouch" controllers.
+
+
 config TOUCHSCREEN_HAMPSHIRE
 	tristate "Hampshire serial touchscreen"
 	select SERIO
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 4be94fc..1792fd9 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -78,3 +78,4 @@ obj-$(CONFIG_TOUCHSCREEN_WM97XX_ZYLONITE)	+= zylonite-wm97xx.o
 obj-$(CONFIG_TOUCHSCREEN_W90X900)	+= w90p910_ts.o
 obj-$(CONFIG_TOUCHSCREEN_TPS6507X)	+= tps6507x-ts.o
 obj-$(CONFIG_TOUCHSCREEN_ZFORCE)	+= zforce_ts.o
+obj-$(CONFIG_TOUCHSCREEN_NEWHAVEN_FT5X0X)	+= ft5x06_ts.o
diff --git a/drivers/input/touchscreen/ft5x06_ts.c b/drivers/input/touchscreen/ft5x06_ts.c
new file mode 100644
index 0000000..f8bf528
--- /dev/null
+++ b/drivers/input/touchscreen/ft5x06_ts.c
@@ -0,0 +1,376 @@
+/*
+ * Copyright (C) 2010 Focal Tech Ltd.
+ * Copyright (C) 2013, Ash Charles <ash@gumstix.com>
+ * Copyright (C) 2014, Adam Lee <adam@gumstix.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/*
+ * This is a driver for the FocalTech FT5x0x family of touch controllers
+ * use in Newhaven capacitive touchscreens.  Note: this does not support with
+ * EDT "Polytouch" controllers.
+ */
+
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/input.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/debugfs.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/input/mt.h>
+#include <linux/input/ft5x06_ts.h>
+
+struct ft5x0x_ts_data {
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct delayed_work work;
+
+	int reset_gpio;
+	int irq_gpio;
+	int wake_gpio;
+};
+
+static int ft5x0x_ts_readwrite(struct i2c_client *client, u16 wr_len,
+			       u8 *wr_buf, u16 rd_len, u8 *rd_buf)
+{
+	struct i2c_msg wrmsg[2];
+	int i = 0;
+	int ret;
+
+	if (wr_len) {
+		wrmsg[i].addr = client->addr;
+		wrmsg[i].flags = 0;
+		wrmsg[i].len = wr_len;
+		wrmsg[i].buf = wr_buf;
+		i++;
+	}
+
+	if (rd_len) {
+		wrmsg[i].addr = client->addr;
+		wrmsg[i].flags = I2C_M_RD;
+		wrmsg[i].len = rd_len;
+		wrmsg[i].buf = rd_buf;
+		i++;
+	}
+
+	ret = i2c_transfer(client->adapter, wrmsg, i);
+
+	if (ret < 0)
+		return ret;
+
+	if (ret != i)
+		return -EIO;
+
+	return 0;
+}
+
+static int ft5x0x_register_write(struct ft5x0x_ts_data *tsdata,
+				 u8 addr, u8 value)
+{
+	u8 wrbuf[2];
+
+	wrbuf[0] = addr;
+	wrbuf[1] = value;
+
+	return ft5x0x_ts_readwrite(tsdata->client, 2, wrbuf, 0, NULL);
+}
+
+static int ft5x0x_register_read(struct ft5x0x_ts_data *tsdata, u8 addr)
+{
+	u8 rdbuf;
+	int error;
+
+	error = ft5x0x_ts_readwrite(tsdata->client, 1, &addr, 1, &rdbuf);
+
+	if (error) {
+		dev_err(&tsdata->client->dev,
+				"Unable to fetch data, error: %d\n",
+				error);
+
+		return error;
+	}
+
+	return rdbuf;
+}
+
+static unsigned char ft5x0x_read_fw_ver(struct ft5x0x_ts_data *tsdata)
+{
+	return ft5x0x_register_read(tsdata, FT5X0X_REG_FIRMID);
+}
+
+static irqreturn_t ft5x0x_ts_isr(int irq, void *dev_id)
+{
+	struct ft5x0x_ts_data *tsdata = dev_id;
+
+	schedule_delayed_work(&tsdata->work, 0);
+	return IRQ_HANDLED;
+}
+static void ft5x0x_ts_work(struct work_struct *work)
+{
+	struct delayed_work *dw = container_of(work, struct delayed_work, work);
+	struct ft5x0x_ts_data *tsdata = container_of(dw,
+						     struct ft5x0x_ts_data,
+						     work);
+	struct device *dev = &tsdata->client->dev;
+	u8 cmd = 0x00;
+	u8 rdbuf[32];
+	int i, x, y, id;
+	bool pressed;
+	int error, type;
+
+	memset(rdbuf, 0, sizeof(rdbuf));
+	error = ft5x0x_ts_readwrite(tsdata->client, sizeof(cmd),
+				    &cmd, sizeof(rdbuf), rdbuf);
+
+	if (error) {
+		dev_err(dev, "Unabled to fetch data, error: %d\n", error);
+		return;
+	}
+
+	for (i = 0; i < 5; i++) {
+		u8 *buf = &rdbuf[i * 6 + 3];
+
+		type = buf[0] >> 6 & 0x3;
+
+		if (type == 0x3)
+			continue;
+
+		x = ((buf[0] << 8) | buf[1]) & 0x0fff;
+		y = ((buf[2] << 8) | buf[3]) & 0x0fff;
+		id = (buf[2] >> 4) & 0x0f;
+		pressed = (type != 0x01);
+		input_mt_slot(tsdata->input, id);
+		input_mt_report_slot_state(tsdata->input,
+					   MT_TOOL_FINGER,
+					   pressed);
+
+		if (!pressed)
+			continue;
+
+		input_report_abs(tsdata->input, ABS_MT_POSITION_X, x);
+		input_report_abs(tsdata->input, ABS_MT_POSITION_Y, y);
+	}
+
+	input_mt_report_pointer_emulation(tsdata->input, true);
+	input_sync(tsdata->input);
+}
+
+static int ft5x0x_ts_reset(struct i2c_client *client,
+			   struct ft5x0x_ts_data *tsdata)
+{
+	int error;
+
+	if (gpio_is_valid(tsdata->wake_gpio)) {
+		/* reset is active low */
+		error = devm_gpio_request_one(&client->dev, tsdata->wake_gpio,
+					      GPIOF_OUT_INIT_LOW,
+					      "ft5x0x wake");
+
+		if (error) {
+			dev_err(&client->dev,
+			"Failed to request GPIO %d as wake pin, error %d\n",
+			tsdata->wake_gpio, error);
+
+			return error;
+		}
+
+		mdelay(20);
+		gpio_set_value(tsdata->wake_gpio, 1);
+	}
+
+	return 0;
+}
+
+static int ft5x0x_i2c_ts_probe_dt(struct device *dev,
+				  struct ft5x0x_ts_data *tsdata)
+{
+	struct device_node *np = dev->of_node;
+
+	tsdata->irq_gpio = -EINVAL;
+	tsdata->reset_gpio = -EINVAL;
+	tsdata->wake_gpio = of_get_named_gpio(np, "wake-gpios", 0);
+
+	return 0;
+}
+
+static int ft5x0x_ts_probe(struct i2c_client *client,
+			   const struct i2c_device_id *id)
+{
+	const struct ft5x0x_platform_data *pdata;
+	struct ft5x0x_ts_data *tsdata;
+	struct input_dev *input;
+	int error;
+
+	pdata = dev_get_platdata(&client->dev);
+
+	tsdata = devm_kzalloc(&client->dev, sizeof(*tsdata), GFP_KERNEL);
+
+	if (!tsdata) {
+		dev_err(&client->dev, "Failed to allocate driver data.\n");
+		return -ENOMEM;
+	}
+
+	if (!pdata) {
+		error = ft5x0x_i2c_ts_probe_dt(&client->dev, tsdata);
+		if (error) {
+			dev_err(&client->dev, "DT probe failed and no platform data present\n");
+			return error;
+		}
+	} else {
+		tsdata->irq_gpio = pdata->irq_gpio;
+		tsdata->wake_gpio = pdata->wake_gpio;
+	}
+
+	error = ft5x0x_ts_reset(client, tsdata);
+
+	if (error)
+		return error;
+
+	if (gpio_is_valid(tsdata->irq_gpio)) {
+		error = devm_gpio_request_one(&client->dev, tsdata->irq_gpio,
+					      GPIOF_IN, "ft5x0x irq");
+
+		if (error) {
+			dev_err(&client->dev, "Failed to request GPIO %d, error %d\n",
+					tsdata->irq_gpio, error);
+			return error;
+	}
+	} else {
+		dev_dbg(&client->dev, "irq_gpio: %d\n", tsdata->irq_gpio);
+		dev_err(&client->dev, "irq_gpio is invalid\n");
+	}
+
+	input = devm_input_allocate_device(&client->dev);
+
+	if (!tsdata || !input) {
+		dev_err(&client->dev, "Failed to allocate driver data.\n");
+		return -ENOMEM;
+	}
+
+	INIT_DELAYED_WORK(&tsdata->work, ft5x0x_ts_work);
+
+	tsdata->client = client;
+	tsdata->input = input;
+
+	dev_dbg(&client->dev, "FT5x0x Firmware version: 0x%x\n",
+			ft5x0x_read_fw_ver(tsdata));
+
+	input->name = FT5X0X_NAME;
+	input->id.bustype = BUS_I2C;
+	input->dev.parent = &client->dev;
+
+	__set_bit(EV_SYN, input->evbit);
+	__set_bit(EV_ABS, input->evbit);
+	__set_bit(EV_KEY, input->evbit);
+	__set_bit(BTN_TOUCH, input->keybit);
+	input_set_abs_params(input, ABS_X, 0, SCREEN_MAX_X, 0, 0);
+	input_set_abs_params(input, ABS_Y, 0, SCREEN_MAX_Y, 0, 0);
+
+	input_mt_init_slots(input, 5, 0);
+	input_set_abs_params(input, ABS_MT_POSITION_X, 0, SCREEN_MAX_X, 0, 0);
+	input_set_abs_params(input, ABS_MT_POSITION_Y, 0, SCREEN_MAX_Y, 0, 0);
+
+	input_set_drvdata(input, tsdata);
+	i2c_set_clientdata(client, tsdata);
+
+	error = devm_request_irq(&client->dev, client->irq, ft5x0x_ts_isr,
+				 IRQF_TRIGGER_FALLING, dev_name(&client->dev),
+				 tsdata);
+
+	if (error != 0) {
+		dev_err(&client->dev, "FT5x0x: Unable to request touchscreen IRQ.\n");
+		return error;
+	}
+
+	error = input_register_device(input);
+
+	if (error) {
+		dev_err(&client->dev,
+		"ft5x0x_ts_probe: failed to register input device: %s\n",
+		dev_name(&client->dev));
+
+		return error;
+	}
+
+	device_init_wakeup(&client->dev, 1);
+
+	dev_dbg(&client->dev, "FT5x0x initialized\n");
+	return 0;
+}
+
+static int ft5x0x_ts_remove(struct i2c_client *client)
+{
+	struct ft5x0x_ts_data *tsdata = i2c_get_clientdata(client);
+
+	input_unregister_device(tsdata->input);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int ft5x0x_ts_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+
+	if (device_may_wakeup(dev))
+		enable_irq_wake(client->irq);
+
+	return 0;
+}
+
+static int ft5x0x_ts_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+
+	if (device_may_wakeup(dev))
+		disable_irq_wake(client->irq);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(ft5x0x_ts_pm_ops, ft5x0x_ts_suspend, ft5x0x_ts_resume);
+
+static const struct i2c_device_id ft5x0x_ts_id[] = {
+	{ FT5X0X_NAME, 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, ft5x0x_ts_id);
+
+#ifdef CONFIG_OF
+static struct of_device_id ft5x0x_dt_match[] = {
+	{ .compatible = "focaltech,ft5x0x" },
+	{},
+};
+#endif
+
+static struct i2c_driver ft5x0x_ts_driver = {
+	.driver	= {
+		.name	= FT5X0X_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = ft5x0x_dt_match,
+	},
+	.probe		= ft5x0x_ts_probe,
+	.remove		= ft5x0x_ts_remove,
+	.id_table	= ft5x0x_ts_id,
+};
+
+module_i2c_driver(ft5x0x_ts_driver);
+
+MODULE_AUTHOR("Ash Charles <ash@gumstix.com>");
+MODULE_AUTHOR("Adam Lee <adam@gumstix.com>");
+MODULE_DESCRIPTION("FocalTech FT5x0x Touchscreen driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/input/ft5x06_ts.h b/include/linux/input/ft5x06_ts.h
new file mode 100644
index 0000000..bb1c190
--- /dev/null
+++ b/include/linux/input/ft5x06_ts.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2013 Ash Charles <ash@gumstix.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ */
+#ifndef _FT5X0X_TS_H__
+#define _FT5X0X_TS_H__
+
+#define SCREEN_MAX_X    470
+#define SCREEN_MAX_Y    275
+#define PRESS_MAX       255
+
+#define FT5X0X_NAME	"ft5x0x_ts"
+#define FT5X0X_REG_POWER_MODE	0xa5
+#define FT5X0X_REG_FIRMID	0xa6
+
+
+struct ft5x0x_platform_data {
+	unsigned int irq_gpio;
+	unsigned int wake_gpio;
+};
+
+#endif /* _FT5X0X_TS_H__ */
-- 
1.9.1


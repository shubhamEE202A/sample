From b15227e92c9d3d6562260d679c464bd93264210b Mon Sep 17 00:00:00 2001
From: Ash Charles <ashcharles@gmail.com>
Date: Wed, 31 Dec 2014 10:28:02 -0800
Subject: [PATCH 2/7] pepper: Add support for DDR3 variants

Some variants of the Gumstix Pepper board use DDR3 memory instead of
DDR2.  This adds a machine variant to support these DDR3-based boards.

Note: this configuration should ultimately be a machine option, not
      packaged with the configuration file. Maintain DDR2 as default

Signed-off-by: Ash Charles <ashcharles@gmail.com>
---
 board/gumstix/pepper/board.c | 97 +++++++++++++++++++++++++++++++++-----------
 include/configs/pepper.h     |  2 +
 2 files changed, 76 insertions(+), 23 deletions(-)

diff --git a/board/gumstix/pepper/board.c b/board/gumstix/pepper/board.c
index f644f81..1bb8fe9 100644
--- a/board/gumstix/pepper/board.c
+++ b/board/gumstix/pepper/board.c
@@ -33,13 +33,55 @@
 DECLARE_GLOBAL_DATA_PTR;
 
 #ifdef CONFIG_SPL_BUILD
-static const struct ddr_data ddr2_data = {
+#define OSC	(V_OSCK/1000000)
+
+#ifdef CONFIG_USE_DDR3
+static const struct ddr_data ddr_data = {
+        .datardsratio0 = MT41K256M16HA125E_RD_DQS,
+        .datawdsratio0 = MT41K256M16HA125E_WR_DQS,
+        .datafwsratio0 = MT41K256M16HA125E_PHY_FIFO_WE,
+        .datawrsratio0 = MT41K256M16HA125E_PHY_WR_DATA,
+};
+
+static const struct cmd_control ddr_cmd_ctrl_data = {
+        .cmd0csratio = MT41K256M16HA125E_RATIO,
+        .cmd0iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+
+        .cmd1csratio = MT41K256M16HA125E_RATIO,
+        .cmd1iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+
+        .cmd2csratio = MT41K256M16HA125E_RATIO,
+        .cmd2iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+};
+
+static struct emif_regs ddr_emif_reg_data = {
+        .sdram_config = MT41K256M16HA125E_EMIF_SDCFG,
+        .ref_ctrl = MT41K256M16HA125E_EMIF_SDREF,
+        .sdram_tim1 = MT41K256M16HA125E_EMIF_TIM1,
+        .sdram_tim2 = MT41K256M16HA125E_EMIF_TIM2,
+        .sdram_tim3 = MT41K256M16HA125E_EMIF_TIM3,
+        .zq_config = MT41K256M16HA125E_ZQ_CFG,
+        .emif_ddr_phy_ctlr_1 = MT41K256M16HA125E_EMIF_READ_LATENCY,
+};
+
+const struct dpll_params dpll_ddr = {400, OSC-1, 1, -1, -1, -1, -1};
+
+const struct ctrl_ioregs ioregs_ddr = {
+        .cm0ioctl               = MT41K256M16HA125E_IOCTRL_VALUE,
+        .cm1ioctl               = MT41K256M16HA125E_IOCTRL_VALUE,
+        .cm2ioctl               = MT41K256M16HA125E_IOCTRL_VALUE,
+        .dt0ioctl               = MT41K256M16HA125E_IOCTRL_VALUE,
+        .dt1ioctl               = MT41K256M16HA125E_IOCTRL_VALUE,
+};
+
+#else
+static const struct ddr_data ddr_data = {
 	.datardsratio0 = MT47H128M16RT25E_RD_DQS,
 	.datafwsratio0 = MT47H128M16RT25E_PHY_FIFO_WE,
 	.datawrsratio0 = MT47H128M16RT25E_PHY_WR_DATA,
 };
 
-static const struct cmd_control ddr2_cmd_ctrl_data = {
+static const struct cmd_control ddr_cmd_ctrl_data = {
 	.cmd0csratio = MT47H128M16RT25E_RATIO,
 
 	.cmd1csratio = MT47H128M16RT25E_RATIO,
@@ -47,7 +89,7 @@ static const struct cmd_control ddr2_cmd_ctrl_data = {
 	.cmd2csratio = MT47H128M16RT25E_RATIO,
 };
 
-static const struct emif_regs ddr2_emif_reg_data = {
+static const struct emif_regs ddr_emif_reg_data = {
 	.sdram_config = MT47H128M16RT25E_EMIF_SDCFG,
 	.ref_ctrl = MT47H128M16RT25E_EMIF_SDREF,
 	.sdram_tim1 = MT47H128M16RT25E_EMIF_TIM1,
@@ -56,6 +98,35 @@ static const struct emif_regs ddr2_emif_reg_data = {
 	.emif_ddr_phy_ctlr_1 = MT47H128M16RT25E_EMIF_READ_LATENCY,
 };
 
+const struct dpll_params dpll_ddr = {266, OSC-1, 1, -1, -1, -1, -1};
+
+const struct ctrl_ioregs ioregs_ddr = {
+	.cm0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.cm1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.cm2ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.dt0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+	.dt1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
+};
+#endif /* CONFIG_USE_DDR3 */
+
+const struct dpll_params *get_dpll_ddr_params(void)
+{
+	return &dpll_ddr;
+}
+
+void sdram_init(void)
+{
+#ifdef CONFIG_USE_DDR3
+	printf("Booting with DDR3\n");
+	config_ddr(400, &ioregs_ddr, &ddr_data,
+		   &ddr_cmd_ctrl_data, &ddr_emif_reg_data, 0);
+#else
+	printf("Booting with DDR\n");
+	config_ddr(266, &ioregs_ddr, &ddr_data,
+		   &ddr_cmd_ctrl_data, &ddr_emif_reg_data, 0);
+#endif
+}
+
 #ifdef CONFIG_SPL_OS_BOOT
 int spl_start_uboot(void)
 {
@@ -64,14 +135,6 @@ int spl_start_uboot(void)
 }
 #endif
 
-#define OSC	(V_OSCK/1000000)
-const struct dpll_params dpll_ddr = {266, OSC-1, 1, -1, -1, -1, -1};
-
-const struct dpll_params *get_dpll_ddr_params(void)
-{
-	return &dpll_ddr;
-}
-
 void set_uart_mux_conf(void)
 {
 	enable_uart0_pin_mux();
@@ -82,19 +145,7 @@ void set_mux_conf_regs(void)
 	enable_board_pin_mux();
 }
 
-const struct ctrl_ioregs ioregs = {
-	.cm0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.cm1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.cm2ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.dt0ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-	.dt1ioctl		= MT47H128M16RT25E_IOCTRL_VALUE,
-};
 
-void sdram_init(void)
-{
-	config_ddr(266, &ioregs, &ddr2_data,
-		   &ddr2_cmd_ctrl_data, &ddr2_emif_reg_data, 0);
-}
 #endif
 
 int board_init(void)
diff --git a/include/configs/pepper.h b/include/configs/pepper.h
index cc153ab..c092e8a 100644
--- a/include/configs/pepper.h
+++ b/include/configs/pepper.h
@@ -17,6 +17,8 @@
 #define V_OSCK				24000000  /* Clock output from T2 */
 #define V_SCLK				(V_OSCK)
 
+/*#define CONFIG_USE_DDR3 */
+
 #undef CONFIG_SYS_PROMPT
 #define CONFIG_SYS_PROMPT		"pepper# "
 
-- 
2.1.0

